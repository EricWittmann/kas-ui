// tslint:disable
/**
 * Managed Service API
 * Managed Service API
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorAllOf
 */
export interface ErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    operation_id?: string;
}
/**
 * 
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {string}
     * @memberof ErrorList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    total: number;
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    items: Array<Error>;
}
/**
 * 
 * @export
 * @interface ErrorListAllOf
 */
export interface ErrorListAllOf {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorListAllOf
     */
    items?: Array<Error>;
}
/**
 * 
 * @export
 * @interface KafkaRequest
 */
export interface KafkaRequest {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    cloud_provider?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KafkaRequest
     */
    multi_az?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    bootstrapServerHost?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface KafkaRequestAllOf
 */
export interface KafkaRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    cloud_provider?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KafkaRequestAllOf
     */
    multi_az?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    bootstrapServerHost?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface KafkaRequestList
 */
export interface KafkaRequestList {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    total: number;
    /**
     * 
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestList
     */
    items: Array<KafkaRequest>;
}
/**
 * 
 * @export
 * @interface KafkaRequestListAllOf
 */
export interface KafkaRequestListAllOf {
    /**
     * 
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestListAllOf
     */
    items?: Array<KafkaRequest>;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {string}
     * @memberof List
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    total: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    operation_id?: string;
}
/**
 * 
 * @export
 * @interface ObjectReference
 */
export interface ObjectReference {
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    href?: string;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    clientToken?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    clientSecret?: string;
}
/**
 * 
 * @export
 * @interface TokenResponseAllOf
 */
export interface TokenResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof TokenResponseAllOf
     */
    clientToken?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponseAllOf
     */
    clientSecret?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequest} kafkaRequest Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka: async (async: boolean, kafkaRequest: KafkaRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'async' is not null or undefined
            if (async === null || async === undefined) {
                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');
            }
            // verify required parameter 'kafkaRequest' is not null or undefined
            if (kafkaRequest === null || kafkaRequest === undefined) {
                throw new RequiredError('kafkaRequest','Required parameter kafkaRequest was null or undefined when calling createKafka.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof kafkaRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequest !== undefined ? kafkaRequest : {}) : (kafkaRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a kafka service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/managed-services-api/v1/kafkas/serviceAccount`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');
            }
            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/managed-services-api/v1/kafkas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequest} kafkaRequest Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a kafka service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceAccount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKafkas(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequest} kafkaRequest Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest> {
            return DefaultApiFp(configuration).createKafka(async, kafkaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a kafka service account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount(options?: any): AxiosPromise<TokenResponse> {
            return DefaultApiFp(configuration).createServiceAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {
            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {
            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList> {
            return DefaultApiFp(configuration).listKafkas(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequest} kafkaRequest Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest>;

    /**
     * 
     * @summary Create a kafka service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createServiceAccount(options?: any): AxiosPromise<TokenResponse>;

    /**
     * 
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;

    /**
     * 
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;

    /**
     * 
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequest} kafkaRequest Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any) {
        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a kafka service account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createServiceAccount(options?: any) {
        return DefaultApiFp(this.configuration).createServiceAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteKafkaById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getKafkaById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listKafkas(page?: string, size?: string, options?: any) {
        return DefaultApiFp(this.configuration).listKafkas(page, size, options).then((request) => request(this.axios, this.basePath));
    }

}


